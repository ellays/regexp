// В регулярных выражениях обычно используется символ слэша в качестве разделителя

const string = 'all your base belong to us'
const regex = /base/
const isExisting = regex.test(string)
console.log(isExisting) // true

// ^ (начало строки):
// В контексте регулярного выражения ^ используется для поиска совпадений только в начале строки.
// Например, регулярное выражение /^abc/ найдет совпадение с текстом, начинающимся с "abc", но не с текстом, где "abc" встречается в середине строки.

const regex2 = /^abc/
console.log(regex2.test('abc123')) // true
console.log(regex2.test('123abc')) // false

// $ (конец строки):
// В контексте регулярного выражения $ используется для поиска совпадений только в конце строки.
// Например, регулярное выражение /xyz$/ найдет совпадение с текстом, заканчивающимся на "xyz", но не с текстом, где "xyz" встречается в начале строки.

const regex3 = /xyz$/
console.log(regex3.test('123xyz')) // true
console.log(regex3.test('xyz123')) // false

// [a-z]:
// Это регулярное выражение соответствует первой строчной букве в строке.

const string2 = 'my name is nataliia and my age is 23'
const regex4 = /[a-z]/
const match = string.match(regex4)
console.log(match) // ['m']

// [1-9]:
// Это регулярное выражение соответствует первой цифре от "1" до "9" в строке.

const string3 = 'my name is nataliia and my age is 23'
const regex5 = /[1-9]/
const match2 = string.match(regex5)
console.log(match) // ['2']

// +:
// В регулярных выражениях + является метасимволом, обозначающим, что предыдущий символ или группа символов должны встречаться один или более раз. Вот как это работает:
// Если + идет после выражения в скобках, она указывает, что это выражение должно встречаться один или более раз.

const regex6 = /a+/
console.log('aabcaaaa'.match(regex6)) // Вывод: ['aa']
const regex7 = /(abc)+/
console.log('abcabcabc'.match(regex7)) // Вывод: ['abcabcabc']

// *:
// В регулярных выражениях * является метасимволом, обозначающим, что предыдущий символ или группа символов могут встречаться ноль или более раз. Вот как это работает:
// Если * идет после одиночного символа или символьной группы, она указывает, что эти символы могут встречаться ноль или более раз.
// Если * идет после выражения в скобках, она указывает, что это выражение может встречаться ноль или более раз.
// Таким образом, * обозначает ноль или более повторений предыдущего символа или выражения в регулярном выражении.

const regex8 = /ab*c/
console.log('ac'.match(regex8)) // Вывод: ['ac']
console.log('abc'.match(regex8)) // Вывод: ['abc']
console.log('abbc'.match(regex8)) // Вывод: ['abbc']

const regex9 = /(abc)*/
console.log('abc'.match(regex9)) // Вывод: ['abc']
console.log('abcabc'.match(regex9)) // Вывод: ['abcabc']
console.log('xyz'.match(regex9)) // Вывод: ['']

// ?:
// В регулярных выражениях символ ? является метасимволом, обозначающим, что предыдущий символ или группа символов может встречаться ноль или один раз.
// Если ? идет после одиночного символа или символьной группы, она указывает, что эти символы могут встречаться ноль или один раз.
// Если ? идет после выражения в скобках, она указывает, что это выражение может встречаться ноль или один раз.
// Таким образом, ? делает предыдущий символ или выражение необязательным в регулярном выражении.

const regex10 = /ab?c/
console.log('ac'.match(regex10)) // Вывод: ['ac']
console.log('abc'.match(regex10)) // Вывод: ['abc']
console.log('abbc'.match(regex10)) // Вывод: null (не совпадает, так как "b" встречается более одного раза)

const regex11 = /(abc)?/
console.log('abc'.match(regex11)) // Вывод: ['abc']
console.log('xyz'.match(regex11)) // Вывод: [''] (пустая строка, так как "abc" отсутствует)
